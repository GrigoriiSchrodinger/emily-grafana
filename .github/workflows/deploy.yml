name: Deploy to Remote Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.REMOTE_SSH_KEY }}

    - name: Copy files to remote server
      run: |
        # Создаем директорию на удаленном сервере
        ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'mkdir -p ~/app'
        
        # Копируем необходимые файлы
        scp -o StrictHostKeyChecking=no docker-compose.yaml ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:~/app/
        scp -o StrictHostKeyChecking=no -r config ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:~/app/
        scp -o StrictHostKeyChecking=no Makefile ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:~/app/

    - name: Deploy on remote server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
          cd ~/app
          
          # Создаем директорию для бэкапов если её нет
          sudo mkdir -p /var/backups/docker-volumes
          
          # Создаем бэкап volumes перед деплоем
          timestamp=$(date +%Y%m%d_%H%M%S)
          sudo tar -czf "/var/backups/docker-volumes/grafana-data_${timestamp}.tar.gz" -C /var/lib/docker/volumes/grafana-data/_data .
          sudo tar -czf "/var/backups/docker-volumes/loki-data_${timestamp}.tar.gz" -C /var/lib/docker/volumes/loki-data/_data .
          
          # Оставляем только последние 5 бэкапов
          sudo find /var/backups/docker-volumes -name "grafana-data_*.tar.gz" -type f -printf '%T@ %p\n' | sort -n | head -n -5 | cut -d' ' -f2- | xargs -r sudo rm
          sudo find /var/backups/docker-volumes -name "loki-data_*.tar.gz" -type f -printf '%T@ %p\n' | sort -n | head -n -5 | cut -d' ' -f2- | xargs -r sudo rm
          
          # Проверяем существование volumes
          if ! docker volume inspect grafana-data > /dev/null 2>&1; then
            # Создаем директории для данных если их нет
            sudo mkdir -p /var/lib/docker/volumes/grafana-data/_data
            
            # Создаем Docker volume
            docker volume create \
              --driver local \
              --opt type=none \
              --opt o=bind \
              --opt device=/var/lib/docker/volumes/grafana-data/_data \
              grafana-data
          fi
          
          if ! docker volume inspect loki-data > /dev/null 2>&1; then
            # Создаем директории для данных если их нет
            sudo mkdir -p /var/lib/docker/volumes/loki-data/_data
            
            # Создаем Docker volume
            docker volume create \
              --driver local \
              --opt type=none \
              --opt o=bind \
              --opt device=/var/lib/docker/volumes/loki-data/_data \
              loki-data
          fi
          
          # Останавливаем контейнеры без удаления чего-либо
          docker compose stop || true
          
          # Удаляем только контейнеры, оставляя volumes и сети
          docker compose rm -f || true
          
          # Устанавливаем правильные права на директории
          sudo chown -R 472:472 /var/lib/docker/volumes/grafana-data/_data
          sudo chown -R 10001:10001 /var/lib/docker/volumes/loki-data/_data
          
          # Запускаем новые контейнеры
          docker compose up -d
          
          # Ждем, пока сервисы запустятся
          sleep 30
          
          # Проверяем статус контейнеров
          docker compose ps
          
          # Проверяем логи на наличие ошибок
          docker compose logs --tail=50
          
          # Проверяем размер volumes и права доступа
          echo "Checking volumes state:"
          sudo ls -la /var/lib/docker/volumes/grafana-data/_data/
          sudo ls -la /var/lib/docker/volumes/loki-data/_data/
          
          # Проверяем, что Grafana и Loki работают корректно
          echo "Checking Grafana health:"
          curl -s http://localhost:3000/api/health || echo "Grafana health check failed"
          
          echo "Checking Loki health:"
          curl -s http://localhost:3100/ready || echo "Loki health check failed"
        EOF