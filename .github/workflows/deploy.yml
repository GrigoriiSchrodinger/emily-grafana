name: Deploy to Remote Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.REMOTE_SSH_KEY }}

    - name: Copy files to remote server
      run: |
        # Создаем директорию на удаленном сервере
        ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'mkdir -p ~/app'
        
        # Удаляем существующий файл .env, если он есть
        ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'rm -f ~/app/.env'
        
        # Копируем необходимые файлы
        scp -o StrictHostKeyChecking=no docker-compose.yaml ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:~/app/
        scp -o StrictHostKeyChecking=no -r config ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:~/app/
        scp -o StrictHostKeyChecking=no Makefile ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:~/app/
        scp -o StrictHostKeyChecking=no .env_example ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:~/app/
        
        # Создаем .env из .env_example на удаленном сервере
        ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'cp ~/app/.env_example ~/app/.env'

    - name: Deploy on remote server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'ENDSSH'
          cd ~/app
          
          # Экспортируем переменные окружения для docker-compose
          export GRAFANA_ADMIN_USER="${{ secrets.GRAFANA_ADMIN_USER }}"
          export GRAFANA_ADMIN_PASSWORD="${{ secrets.GRAFANA_ADMIN_PASSWORD }}"
          
          # Создаем volumes если они не существуют
          if ! docker volume inspect grafana-data >/dev/null 2>&1; then
            echo "Creating grafana-data volume..."
            docker volume create --name grafana-data
          fi
          
          if ! docker volume inspect loki-data >/dev/null 2>&1; then
            echo "Creating loki-data volume..."
            docker volume create --name loki-data
          fi
          
          # Создаем сеть если она не существует
          if ! docker network inspect app >/dev/null 2>&1; then
            echo "Creating app network..."
            docker network create app
          fi
          
          # Останавливаем контейнеры если они запущены
          docker compose down || true
          
          # Функция для проверки статуса контейнеров
          check_containers() {
            local all_running=true
            local container_status=""
            
            while IFS= read -r container; do
              container_status=$(docker inspect --format '{{.State.Status}}' "$container" 2>/dev/null)
              if [ "$container_status" != "running" ]; then
                all_running=false
                echo "Container $container is not running (status: $container_status)"
              fi
            done < <(docker compose ps -q)
            
            [ "$all_running" = true ]
          }
          
          # Запускаем контейнеры с повторными попытками
          max_attempts=3
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts to start containers"
            
            docker compose up -d
            
            # Ждем запуска сервисов
            echo "Waiting for services to start..."
            sleep 45
            
            if check_containers; then
              echo "All containers are running successfully"
              break
            else
              echo "Some containers failed to start. Checking logs:"
              docker compose logs --tail=100
              
              if [ $attempt -eq $max_attempts ]; then
                echo "Failed to start containers after $max_attempts attempts"
                exit 1
              fi
              
              echo "Stopping containers and retrying..."
              docker compose down
              sleep 10
              attempt=$((attempt + 1))
            fi
          done
          
          # Проверяем доступность сервисов
          echo "Checking Grafana health:"
          if ! curl -s http://localhost:3000/api/health; then
            echo "Grafana health check failed"
            docker compose logs grafana --tail=50
            exit 1
          fi
          
          echo "Checking Loki health:"
          if ! curl -s http://localhost:3100/ready; then
            echo "Loki health check failed"
            docker compose logs loki --tail=50
            exit 1
          fi
          
          echo "Deployment completed successfully"
        ENDSSH