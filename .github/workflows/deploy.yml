name: Deploy to Remote Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.REMOTE_SSH_KEY }}

    - name: Copy files to remote server
      run: |
        # Создаем директорию на удаленном сервере
        ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'mkdir -p ~/app'
        
        # Копируем необходимые файлы
        scp -o StrictHostKeyChecking=no docker-compose.yaml ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:~/app/
        scp -o StrictHostKeyChecking=no -r config ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:~/app/
        scp -o StrictHostKeyChecking=no Makefile ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:~/app/

    - name: Deploy on remote server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
          cd ~/app
          
          # Создаем директории для постоянного хранения данных
          sudo mkdir -p /opt/grafana /opt/loki
          sudo chown -R 472:472 /opt/grafana  # 472 - это UID пользователя grafana в контейнере
          sudo chown -R 10001:10001 /opt/loki # 10001 - это UID пользователя loki в контейнере
          
          # Останавливаем существующие контейнеры, сохраняя volumes
          docker compose down --volumes=false || true
          
          # Запускаем новые контейнеры
          docker compose up -d
        EOF