name: Deploy to Remote Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.REMOTE_SSH_KEY }}

    - name: Copy files to remote server
      run: |
        # Создаем директорию на удаленном сервере
        ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'mkdir -p ~/app'
        
        # Копируем необходимые файлы
        scp -o StrictHostKeyChecking=no docker-compose.yaml ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:~/app/
        scp -o StrictHostKeyChecking=no -r config ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:~/app/
        scp -o StrictHostKeyChecking=no Makefile ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:~/app/

    - name: Deploy on remote server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
          cd ~/app
          
          # Создаем Docker volumes с нужными параметрами если они еще не существуют
          docker volume create \
            --driver local \
            --opt type=none \
            --opt o=bind \
            --opt device=/var/lib/docker/volumes/grafana-data/_data \
            grafana-data || true
          
          docker volume create \
            --driver local \
            --opt type=none \
            --opt o=bind \
            --opt device=/var/lib/docker/volumes/loki-data/_data \
            loki-data || true
          
          # Создаем директории для данных если их нет
          sudo mkdir -p /var/lib/docker/volumes/grafana-data/_data
          sudo mkdir -p /var/lib/docker/volumes/loki-data/_data
          
          # Останавливаем контейнеры без удаления чего-либо
          docker compose stop || true
          
          # Удаляем только контейнеры, оставляя volumes и сети
          docker compose rm -f || true
          
          # Устанавливаем правильные права на директории
          sudo chown -R 472:472 /var/lib/docker/volumes/grafana-data/_data
          sudo chown -R 10001:10001 /var/lib/docker/volumes/loki-data/_data
          
          # Запускаем новые контейнеры
          docker compose up -d
          
          # Ждем, пока сервисы запустятся
          sleep 30
          
          # Проверяем статус контейнеров
          docker compose ps
          
          # Проверяем логи на наличие ошибок
          docker compose logs --tail=50
          
          # Проверяем, что volumes существуют и содержат данные
          echo "Checking volumes:"
          docker volume ls | grep -E 'grafana-data|loki-data'
          
          # Проверяем размер volumes
          sudo du -sh /var/lib/docker/volumes/grafana-data/_data/
          sudo du -sh /var/lib/docker/volumes/loki-data/_data/
        EOF