name: Deploy to Remote Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.REMOTE_SSH_KEY }}

    - name: Copy files to remote server
      run: |
        # Создаем директорию на удаленном сервере
        ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'mkdir -p ~/app'
        
        # Копируем необходимые файлы
        scp -o StrictHostKeyChecking=no docker-compose.yaml ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:~/app/
        scp -o StrictHostKeyChecking=no -r config ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:~/app/
        scp -o StrictHostKeyChecking=no Makefile ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:~/app/

    - name: Deploy on remote server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
          cd ~/app
          
          # Проверяем и создаем директории для volumes если их нет
          sudo mkdir -p /var/lib/docker/volumes/grafana-data/_data
          sudo mkdir -p /var/lib/docker/volumes/loki-data/_data
          
          # Проверяем существующие volumes и их данные
          echo "Checking existing volumes:"
          docker volume ls
          
          # Проверяем содержимое директорий
          echo "Checking Grafana data directory:"
          sudo ls -la /var/lib/docker/volumes/grafana-data/_data/
          
          # Удаляем volumes если они существуют, но не правильно настроены
          if docker volume inspect grafana-data >/dev/null 2>&1; then
            docker volume rm grafana-data || true
          fi
          
          if docker volume inspect loki-data >/dev/null 2>&1; then
            docker volume rm loki-data || true
          fi
          
          # Создаем Docker volumes заново с правильными параметрами
          docker volume create \
            --driver local \
            --opt type=none \
            --opt o=bind \
            --opt device=/var/lib/docker/volumes/grafana-data/_data \
            grafana-data
          
          docker volume create \
            --driver local \
            --opt type=none \
            --opt o=bind \
            --opt device=/var/lib/docker/volumes/loki-data/_data \
            loki-data
          
          # Устанавливаем правильные права на директории
          sudo chown -R 472:472 /var/lib/docker/volumes/grafana-data/_data
          sudo chown -R 10001:10001 /var/lib/docker/volumes/loki-data/_data
          
          # Проверяем права доступа после установки
          echo "Checking permissions after setup:"
          ls -la /var/lib/docker/volumes/grafana-data/_data
          
          # Останавливаем контейнеры если они запущены
          docker compose down || true
          
          # Запускаем контейнеры
          docker compose up -d
          
          # Ждем запуска сервисов
          echo "Waiting for services to start..."
          sleep 45
          
          # Проверяем статус контейнеров
          docker compose ps
          
          # Проверяем логи на наличие ошибок
          docker compose logs --tail=50
          
          # Проверяем доступность сервисов
          echo "Checking Grafana health:"
          curl -s http://localhost:3000/api/health || echo "Grafana health check failed"
          
          echo "Checking Loki health:"
          curl -s http://localhost:3100/ready || echo "Loki health check failed"
          
          # Проверяем, что volumes правильно примонтированы
          docker inspect grafana | grep Mounts -A 10
        EOF